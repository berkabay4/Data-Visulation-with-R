barp <- barp + coord_polar(theta='y')
barp <- barp + theme(
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank()) +
labs(y="Carburetors")
print(barp)
# -- Pie Charts --
# ggplot2 harici bir kütüphane olduğu için yüklü değil ise yükle.
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2")}
library(ggplot2)
# Pie Charts(Pasta Grafik) iş dünyasında en çok kullanılan dairesel grafiklerdir.
# Verinin her bir bölümünün genel bir toplama katkısının oranını gösterir.
# Ggplot2'deki bir pasta grafik, dönüştürülmüş bir stacked bar plottur (Yığılmış çubuk grafiği).
barp <- ggplot(mtcars, aes(x=1, y=sort(mtcars$carb), fill=sort(mtcars$carb))) +geom_bar(stat="identity")
print(barp)
# Şimdi bu stack bar grafiğini pie chart 'a çevirmeliyiz.
# Eğer bu stack bar 'ı polar kordinatlarda çizersek bunu yapabiliriz.
# https://ibm.box.com/shared/static/me1bmbb54gneyr5epweqe88zg8ujkqst.gif"
barp <- barp + coord_polar(theta='y')
print(barp)
# theme ile polar kordinatlara ait eksenleri silebiliriz.
barp <- barp + coord_polar(theta='y')
barp <- barp + theme(
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.y=element_blank())
print(barp)
# Arka planı kaldırmak için;
barp <- barp + coord_polar(theta='y')
barp <- barp + theme(
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank())
print(barp)
# Bilgilendirme için label(etiket) eklersek;
barp <- barp + coord_polar(theta='y')
barp <- barp + theme(
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank()) +
labs(y="Carburetors")
print(barp)
?ggplot
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2")}
library(ggplot2)
# Araçların metre başıan harcadığı galon yakıt ve ağırlıklarına göre bir dağılım grafiği çizmek istersek;
qplot(mpg, wt, data=mtcars)
library(ggplot2)
# Araçların metre başıan harcadığı galon yakıt ve ağırlıklarına göre bir dağılım grafiği çizmek istersek;
qplot(mpg, wt, data=mtcars)
# Aynı grafiği ggplot kullanarak çizmek istersek;
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=1)
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=17)
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=7)
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=19)
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=18)
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=19)
ggplot(mtcars,aes(x=mpg,y=wt,shape = cyl)) + geom_point() + scale_shape_identity()
mtcars$cylFactor<- factor(mtcars$cyl)
ggplot(mtcars,aes(x=mpg,y=wt,shape = cylFactor)) + geom_point()
mtcars$cylFactor
ggplot(mtcars,aes(x=mpg,y=wt)) + geom_point(shape=19, colour="blue")
ggplot(mtcars,aes(x=mpg,y=wt,color = cyl))+ geom_point(shape=19)
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19)
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) + labs(colour = "Cylinders")
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) + xlab("Miles per Gallon ") + ylab("Weight") +
labs(colour = "Cylinders") + ggtitle("Scatterplot")
# -- Line Graph (Çizgi Grafiği)--
# Line grafikler scatterplot grafikleri gibi kartezyen kordinatlarda ifade edilir.
# Ancak scatterplotta olduğu gibi bağımsız noklarla değil, noktaların birleşmiş halinin oluşturduğu
# bir çizgi şeklinde görselleştirilir.
# Line Graph örnekleri için "EuStockMarkets" dataseti kullanılabilir.
# Bu dataset hakkında bilgi almak için  "?EuStockMarkets" yazılabilir.
?EuStockMarkets
# -- Line Graph (Çizgi Grafiği)--
# ggplot2 harici bir kütüphane olduğu için yüklü değil ise yükle.
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2")}
library(ggplot2)
# Line grafikler scatterplot grafikleri gibi kartezyen kordinatlarda ifade edilir.
# Ancak scatterplotta olduğu gibi bağımsız noklarla değil, noktaların birleşmiş halinin oluşturduğu
# bir çizgi şeklinde görselleştirilir.
# Line Graph örnekleri için "EuStockMarkets" dataseti kullanılabilir.
# Bu dataset hakkında bilgi almak için  "?EuStockMarkets" yazılabilir.
?EuStockMarkets
# Yukarıdaki komut yazıldığında "mts" ifadesi bu datasetin matris olduğunu gösterir.
# ggplot2 matris formatı ile çalışmadığından bu dataset üzerinde düzenleme yapılması gerekir.
# Bu durumu değiştirmek için aşağıdaki komut kullanılabilir;
EuStockDF <- as.data.frame(EuStockMarkets)
# head() komutu ile datasetin ilk 6 satırı incelenebilir.
head(EuStockDF)
1:nrow(EuStockDF)
EuStockDF
nrow(EuStockDF)
# -- Line Graph (Çizgi Grafiği)--
# ggplot2 harici bir kütüphane olduğu için yüklü değil ise yükle.
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2")}
library(ggplot2)
# Line grafikler scatterplot grafikleri gibi kartezyen kordinatlarda ifade edilir.
# Ancak scatterplotta olduğu gibi bağımsız noklarla değil, noktaların birleşmiş halinin oluşturduğu
# bir çizgi şeklinde görselleştirilir.
# Line Graph örnekleri için "EuStockMarkets" dataseti kullanılabilir.
# Bu dataset hakkında bilgi almak için  "?EuStockMarkets" yazılabilir.
?EuStockMarkets
# Yukarıdaki komut yazıldığında "mts" ifadesi bu datasetin matris olduğunu gösterir.
# ggplot2 matris formatı ile çalışmadığından bu dataset üzerinde düzenleme yapılması gerekir.
# Bu durumu değiştirmek için aşağıdaki komut kullanılabilir;
EuStockDF <- as.data.frame(EuStockMarkets)
# head() komutu ile datasetin ilk 6 satırı incelenebilir.
head(EuStockDF)
# Bir LineGraph çizmek istersek;
# X eksenindeki değer için; 1 'den oluşturduğumuz "EuStockDF" dataframe 'in satır sayısı kadar yazabiliriz.
# Böylece; mevcut olan data sayısına göre göre "DAX" değerini Y-ekseninde çizdirebiliriz.
ggplot(EuStockDF,aes(x=c(1:nrow(EuStockDF)), y = DAX)) + geom_line()
ggplot(EuStockDF,aes(x=c(1:nrow(EuStockDF)), y = DAX)) + geom_line(size=1.5) + labs(x = "Stocks")
ggplot(EuStockDF,aes(x=c(1:nrow(EuStockDF)), y = DAX)) + geom_line(size=1.5, colour="light blue") + labs(x = "Time", y = "Stocks")
dax_smi_plot <- ggplot() +
geom_line(data = EuStockDF,aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour="light blue") +
geom_line(data = EuStockDF,aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") +
labs(x = "Time", y = "Stocks")
print(dax_smi_plot)
all_stocks <- ggplot() +
geom_line(data = EuStockDF,aes(x=c(1:nrow(EuStockDF)), y = DAX), size=1, colour="light blue") +
geom_line(data = EuStockDF,aes(x=c(1:nrow(EuStockDF)), y = SMI), size =1, colour = "red") +
geom_line(data = EuStockDF,aes(x=c(1:nrow(EuStockDF)), y = CAC), size =1, colour = "purple") +
geom_line(data = EuStockDF,aes(x=c(1:nrow(EuStockDF)), y = FTSE), size =1, colour = "green") +
labs(x = "Time", y = "Stocks")
print(all_stocks)
legend_stocks <- all_stocks + xlab("Days") + ylab("Price") + ggtitle("Eu Stocks")
print(legend_stocks)
ggplot(mtcars,aes(x=mpg,y=wt))  + geom_point(shape=19) +
geom_smooth(method="lm", se= FALSE, color = "red")
#se = TRUE  -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color = "red")
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
geom_smooth(method="lm", se= TRUE, color = "red") + xlab("Miles per Gallon ") +
ylab("Weight") +  labs(colour = "Cylinders") + ggtitle("Linear Regression")
# -- Regression --
# Regresyon; iki ya da daha fazla değişken arasındaki ilişkiyi ölçmek için kullanılan bir analiz metodudur.
# Regresyon trendleri göstermek ve tahminlerde(Predictions) bulunmak için harika bir yoldur.
# ggplot2 harici bir kütüphane olduğu için yüklü değil ise yükle.
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2")}
library(ggplot2)
# Kullanacağımız ilk yöntem doğrusal regresyon, yani doğrusal modeli kullanan regresyon.
# Bunu yapmak için, ek olarak "geom_smooth(method="lm", se= FALSE, color = ...)" kullanabiliriz.
ggplot(mtcars,aes(x=mpg,y=wt))  + geom_point(shape=19) +
geom_smooth(method="lm", se= FALSE, color = "red")
# "se  = FALSE" kısımı "confidence interval" dediğimiz değerin açılıp/kapanması içindir.
#  Bu değer çizdiğimiz eğrinin %95 altında ve üstünde kesinlikte bulunan alanları gösterir.
#se = TRUE  -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color = "red")
# 3. değişken olarak silindir değeri eklenirse;
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
geom_smooth(method="lm", se= TRUE, color = "red") + xlab("Miles per Gallon ") +
ylab("Weight") +  labs(colour = "Cylinders") + ggtitle("Linear Regression")
# -- Regression --
# Regresyon; iki ya da daha fazla değişken arasındaki ilişkiyi ölçmek için kullanılan bir analiz metodudur.
# Regresyon trendleri göstermek ve tahminlerde(Predictions) bulunmak için harika bir yoldur.
# ggplot2 harici bir kütüphane olduğu için yüklü değil ise yükle.
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2")}
library(ggplot2)
# Kullanacağımız ilk yöntem doğrusal regresyon, yani doğrusal modeli kullanan regresyon.
# Bunu yapmak için, ek olarak "geom_smooth(method="lm", se= FALSE, color = ...)" kullanabiliriz.
ggplot(mtcars,aes(x=mpg,y=wt))  + geom_point(shape=19) +
geom_smooth(method="lm", se= FALSE, color = "red")
# "se  = FALSE" kısımı "confidence interval" dediğimiz değerin açılıp/kapanması içindir.
#  Bu değer çizdiğimiz eğrinin %95 altında ve üstünde kesinlikte bulunan alanları gösterir.
#se = TRUE  -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color = "red")
# Silindir sayısına bağlı değişim için öncelikle silindir değerlerini faktör olarak tanımlamamız gerekli.
mtcars$cylFactor<- factor(mtcars$cyl)
# 3. değişken olarak silindir değeri eklenirse;
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
geom_smooth(method="lm", se= TRUE, color = "red") + xlab("Miles per Gallon ") +
ylab("Weight") +  labs(colour = "Cylinders") + ggtitle("Linear Regression")
# Gauss modeli; Lineer Regresyondaki gibi düz bir çizgi yerine bir eğri olarak karşımıza çıkar.
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
geom_smooth(method="auto", se= TRUE, color = "red") + xlab("Miles per Gallon ") +
ylab("Weight") +  labs(colour = "Cylinders") + ggtitle("Gaussian Regression")
# Gauss modeli; Lineer Regresyondaki gibi düz bir çizgi yerine bir eğri olarak karşımıza çıkar.
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
geom_smooth(method="auto", se= TRUE, color = "red") + xlab("Miles per Gallon ") +
ylab("Weight") +  labs(colour = "Cylinders") + ggtitle("Gaussian Regression")
# -- Linear Regression --
# Regresyon; iki ya da daha fazla değişken arasındaki ilişkiyi ölçmek için kullanılan bir analiz metodudur.
# Regresyon trendleri göstermek ve tahminlerde(Predictions) bulunmak için harika bir yoldur.
# ggplot2 harici bir kütüphane olduğu için yüklü değil ise yükle.
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2")}
library(ggplot2)
# Kullanacağımız ilk yöntem doğrusal regresyon, yani doğrusal modeli kullanan regresyon.
# Bunu yapmak için, ek olarak "geom_smooth(method="lm", se= FALSE, color = ...)" kullanabiliriz.
ggplot(mtcars,aes(x=mpg,y=wt))  + geom_point(shape=19) +
geom_smooth(method="lm", se= FALSE, color = "red")
# "se  = FALSE" kısımı "confidence interval" dediğimiz değerin açılıp/kapanması içindir.
#  Bu değer çizdiğimiz eğrinin %95 altında ve üstünde kesinlikte bulunan alanları gösterir.
#se = TRUE  -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color = "red")
# Silindir sayısına bağlı değişim için öncelikle silindir değerlerini faktör olarak tanımlamamız gerekli.
mtcars$cylFactor<- factor(mtcars$cyl)
# 3. değişken olarak silindir değeri eklenirse;
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
geom_smooth(method="lm", se= TRUE, color = "red") + xlab("Miles per Gallon ") +
ylab("Weight") +  labs(colour = "Cylinders") + ggtitle("Linear Regression")
# -- Gaussian Regression Model --
# Gauss modeli; Lineer Regresyondaki gibi düz bir çizgi yerine bir eğri olarak karşımıza çıkar.
ggplot(mtcars,aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
geom_smooth(method="auto", se= TRUE, color = "red") + xlab("Miles per Gallon ") +
ylab("Weight") +  labs(colour = "Cylinders") + ggtitle("Gaussian Regression")
source('C:/Users/Berkay ABAY/Desktop/RStudio_codes/R  Visulation/Linear_Regression.R')
